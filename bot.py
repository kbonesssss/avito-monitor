import logging
import re
from typing import Dict, Set
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, CHECK_INTERVAL, MAX_ITEMS_PER_USER, PRICE_CHANGE_THRESHOLD
from avito_api import AvitoAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_items: Dict[int, Dict[str, float]] = {}  # user_id -> {item_id: last_price}
user_searches: Dict[int, Set[str]] = {}  # user_id -> set of search queries

class AvitoBot:
    def __init__(self):
        self.api = AvitoAPI()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ:\n"
            "1. ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã\n"
            "2. –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search - –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "/remove - —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "3. –ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/search - –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "/remove - —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ó–∞–ø—Ä–æ—Å | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ì–æ—Ä–æ–¥ | –¶–µ–Ω–∞ –æ—Ç | –¶–µ–Ω–∞ –¥–æ\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 13 | –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ | –ú–æ—Å–∫–≤–∞ | 50000 | 80000\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        )

    async def list_items(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        if user_id not in user_items or not user_items[user_id]:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return

        message = "–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        for i, (item_id, price) in enumerate(user_items[user_id].items(), 1):
            message += f"{i}. ID: {item_id} - –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {price:,.2f} ‚ÇΩ\n"
        
        await update.message.reply_text(message)

    async def remove_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        if user_id not in user_items or not user_items[user_id]:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return

        items = list(user_items[user_id].items())
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, (item_id, price) in enumerate(items, 1):
            message += f"{i}. ID: {item_id} - –¶–µ–Ω–∞: {price:,.2f} ‚ÇΩ\n"
        
        await update.message.reply_text(message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if text.isdigit():
            if user_id in user_items and user_items[user_id]:
                try:
                    index = int(text) - 1
                    items = list(user_items[user_id].items())
                    if 0 <= index < len(items):
                        item_id, _ = items[index]
                        del user_items[user_id][item_id]
                        await update.message.reply_text(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {item_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                    else:
                        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
                except Exception as e:
                    logger.error(f"Error removing item: {e}")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if "|" in text:
            # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            params = [p.strip() for p in text.split("|")]
            try:
                search_query = params[0]
                category = params[1] if len(params) > 1 else None
                location = params[2] if len(params) > 2 else None
                price_from = int(params[3]) if len(params) > 3 else None
                price_to = int(params[4]) if len(params) > 4 else None

                await self.search_items(update, search_query, category, location, price_from, price_to)
            except Exception as e:
                logger.error(f"Error processing search query: {e}")
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:\n"
                    "–ó–∞–ø—Ä–æ—Å | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ì–æ—Ä–æ–¥ | –¶–µ–Ω–∞ –æ—Ç | –¶–µ–Ω–∞ –¥–æ"
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if re.match(r'^\d+$', text):
            if user_id not in user_items:
                user_items[user_id] = {}

            if len(user_items[user_id]) >= MAX_ITEMS_PER_USER:
                await update.message.reply_text(
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({MAX_ITEMS_PER_USER}). "
                    "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /remove"
                )
                return

            try:
                item_details = await self.api.get_item_details(text)
                if item_details:
                    price = float(item_details.get('price', 0))
                    user_items[user_id][text] = price
                    await update.message.reply_text(
                        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!\n"
                        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:,.2f} ‚ÇΩ\n"
                        f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç"
                    )
                else:
                    await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                logger.error(f"Error adding item: {e}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

    async def search_items(
        self,
        update: Update,
        query: str,
        category: Optional[str] = None,
        location: Optional[str] = None,
        price_from: Optional[int] = None,
        price_to: Optional[int] = None
    ) -> None:
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            category_id = None
            if category:
                categories = await self.api.get_categories()
                category_id = next(
                    (cat['id'] for cat in categories if cat['name'].lower() == category.lower()),
                    None
                )

            # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            location_id = None
            if location:
                locations = await self.api.get_locations(location)
                location_id = next(
                    (loc['id'] for loc in locations if loc['name'].lower() == location.lower()),
                    None
                )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = await self.api.search_items(
                category_id=category_id,
                location_id=location_id,
                search_query=query,
                price_from=price_from,
                price_to=price_to
            )

            if not results.get('items'):
                await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
            for item in results['items'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                price = float(item.get('price', 0))
                message += (
                    f"üìå {item['title']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price:,.2f} ‚ÇΩ\n"
                    f"üìç {item.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üîó ID: {item['id']}\n\n"
                )

            message += "\n–ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID"
            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"Error searching items: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    async def check_prices(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        for user_id, items in user_items.items():
            for item_id, last_price in items.copy().items():
                try:
                    item_details = await self.api.get_item_details(item_id)
                    if not item_details:
                        # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                        del items[item_id]
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ {item_id} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
                        )
                        continue

                    current_price = float(item_details.get('price', 0))
                    if current_price != last_price:
                        price_change = ((current_price - last_price) / last_price) * 100
                        if abs(price_change) >= PRICE_CHANGE_THRESHOLD:
                            direction = "–≤—ã—Ä–æ—Å–ª–∞" if current_price > last_price else "—Å–Ω–∏–∑–∏–ª–∞—Å—å"
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=(
                                    f"üö® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏!\n"
                                    f"ID: {item_id}\n"
                                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item_details.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                    f"–¶–µ–Ω–∞ {direction} –Ω–∞ {abs(price_change):.2f}%\n"
                                    f"–° {last_price:,.2f} ‚ÇΩ –¥–æ {current_price:,.2f} ‚ÇΩ"
                                )
                            )
                            items[item_id] = current_price

                except Exception as e:
                    logger.error(f"Error checking price for item {item_id}: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    avito_bot = AvitoBot()
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", avito_bot.start))
    application.add_handler(CommandHandler("help", avito_bot.help_command))
    application.add_handler(CommandHandler("search", avito_bot.search_command))
    application.add_handler(CommandHandler("list", avito_bot.list_items))
    application.add_handler(CommandHandler("remove", avito_bot.remove_item))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, avito_bot.handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
    job_queue = application.job_queue
    job_queue.run_repeating(avito_bot.check_prices, interval=CHECK_INTERVAL, first=10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 